version: 0.2

env:
  variables:
    AWS_REGION: "us-east-1"
    AWS_ACCOUNT_ID: "826695974453"
    ECR_REPO_NAME: "streamlit-app-1"
    ECS_CLUSTER_NAME: "RagApp-fargate-cluster"
    ECS_SERVICE_NAME: "rag-app-service"
    ECS_CONTAINER_NAME: "my-container"

phases:
  pre_build:
    commands:
      - echo "=== PRE-BUILD PHASE STARTED ==="
      - aws --version
      - aws sts get-caller-identity

      # Build variables
      - REPOSITORY_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME"

      # Use Git commit hash if available, else fallback to CodeBuild build ID
      - IMAGE_TAG_SRC="${CODEBUILD_RESOLVED_SOURCE_VERSION:-$CODEBUILD_BUILD_ID}"
      - IMAGE_TAG="$(echo "$IMAGE_TAG_SRC" | cut -c 1-7)"
      - if [ -z "$IMAGE_TAG" ]; then echo "IMAGE_TAG is empty! Exiting."; exit 1; fi
      - export REPOSITORY_URI IMAGE_TAG

      - echo "Repository URI=$REPOSITORY_URI"
      - echo "Image Tag=$IMAGE_TAG"

      # Login to ECR
      - aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$REPOSITORY_URI"

      # Ensure repository exists
      - aws ecr describe-repositories --repository-names "$ECR_REPO_NAME" --region "$AWS_REGION" || aws ecr create-repository --repository-name "$ECR_REPO_NAME" --region "$AWS_REGION"

      # Quick sanity check
      - test -f Dockerfile || (echo "Dockerfile missing!" && exit 1)

  build:
    commands:
      - echo "=== BUILD PHASE STARTED ==="
      - ls -al
      - docker version
      - docker info
      - echo "Building Docker image..."
      - docker build --no-cache --progress=plain -t "$REPOSITORY_URI:$IMAGE_TAG" .
      - echo "Tagging image as latest..."
      - docker tag "$REPOSITORY_URI:$IMAGE_TAG" "$REPOSITORY_URI:latest"
      - echo "Verifying image exists..."
      - docker images | grep "$ECR_REPO_NAME" || (echo "Image not found after build!" && exit 1)

  post_build:
    commands:
      - echo "=== POST-BUILD PHASE STARTED ==="
      - docker images
      - echo "Pushing Docker images to ECR..."
      - docker push "$REPOSITORY_URI:$IMAGE_TAG"
      - docker push "$REPOSITORY_URI:latest"
      - echo "Creating imagedefinitions.json for CodeDeploy/ECS..."
      - printf '[{"name":"%s","imageUri":"%s"}]' "$ECS_CONTAINER_NAME" "$REPOSITORY_URI:$IMAGE_TAG" > imagedefinitions.json
      - cat imagedefinitions.json
      - echo "=== BUILD COMPLETED SUCCESSFULLY ==="

artifacts:
  files:
    - imagedefinitions.json
    - taskdef.json
    - appspec.yml
